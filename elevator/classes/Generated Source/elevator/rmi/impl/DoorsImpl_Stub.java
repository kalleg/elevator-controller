// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package elevator.rmi.impl;

public final class DoorsImpl_Stub
    extends java.rmi.server.RemoteStub
    implements elevator.rmi.Doors, java.rmi.Remote
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_close_0;
    private static java.lang.reflect.Method $method_close_1;
    private static java.lang.reflect.Method $method_close_2;
    private static java.lang.reflect.Method $method_open_3;
    private static java.lang.reflect.Method $method_open_4;
    private static java.lang.reflect.Method $method_open_5;
    private static java.lang.reflect.Method $method_operate_6;
    private static java.lang.reflect.Method $method_operate_7;
    
    static {
	try {
	    $method_close_0 = elevator.rmi.Doors.class.getMethod("close", new java.lang.Class[] {});
	    $method_close_1 = elevator.rmi.Doors.class.getMethod("close", new java.lang.Class[] {int.class});
	    $method_close_2 = elevator.rmi.Doors.class.getMethod("close", new java.lang.Class[] {int[].class});
	    $method_open_3 = elevator.rmi.Doors.class.getMethod("open", new java.lang.Class[] {});
	    $method_open_4 = elevator.rmi.Doors.class.getMethod("open", new java.lang.Class[] {int.class});
	    $method_open_5 = elevator.rmi.Doors.class.getMethod("open", new java.lang.Class[] {int[].class});
	    $method_operate_6 = elevator.rmi.Doors.class.getMethod("operate", new java.lang.Class[] {int[].class});
	    $method_operate_7 = elevator.rmi.Doors.class.getMethod("operate", new java.lang.Class[] {int[].class, int[].class});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public DoorsImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of close()
    public void close()
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_close_0, null, -4742752445160157748L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of close(int)
    public void close(int $param_int_1)
	throws elevator.rmi.IllegalParamException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_close_1, new java.lang.Object[] {new java.lang.Integer($param_int_1)}, -8813479922535946172L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of close(int[])
    public void close(int[] $param_arrayOf_int_1)
	throws elevator.rmi.IllegalParamException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_close_2, new java.lang.Object[] {$param_arrayOf_int_1}, -6402089273977995827L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of open()
    public void open()
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_open_3, null, 2108930122558793662L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of open(int)
    public void open(int $param_int_1)
	throws elevator.rmi.IllegalParamException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_open_4, new java.lang.Object[] {new java.lang.Integer($param_int_1)}, -3109760846282802569L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of open(int[])
    public void open(int[] $param_arrayOf_int_1)
	throws elevator.rmi.IllegalParamException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_open_5, new java.lang.Object[] {$param_arrayOf_int_1}, 381417742691975842L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of operate(int[])
    public void operate(int[] $param_arrayOf_int_1)
	throws elevator.rmi.IllegalParamException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_operate_6, new java.lang.Object[] {$param_arrayOf_int_1}, 4240723040120963154L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of operate(int[], int[])
    public void operate(int[] $param_arrayOf_int_1, int[] $param_arrayOf_int_2)
	throws elevator.rmi.IllegalParamException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_operate_7, new java.lang.Object[] {$param_arrayOf_int_1, $param_arrayOf_int_2}, -6228161858448778909L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
